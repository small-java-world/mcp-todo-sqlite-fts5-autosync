



import Database from 'better-sqlite3';



import fs from 'fs';



import path from 'path';



import { ReviewIssuesManager } from './review-issues.js';







export type TaskRow = {



  id: string;



  title: string;



  text: string;



  done: number;



  archived: number;



  parent_id?: string | null;



  level: number;



  state: string;



  assignee?: string | null;



  due_at?: number | null;



  meta: string | null;



  vclock: number;



  updated_at: number;



};







export class DB {



  db: Database.Database;



  casRoot: string;



  issuesManager: ReviewIssuesManager;







  constructor(dataDir = 'data', dbFile = 'todo.db', casRoot = path.join('data','cas')) {



    fs.mkdirSync(dataDir, { recursive: true });



    fs.mkdirSync(casRoot, { recursive: true });



    this.casRoot = casRoot;



    const full = path.join(dataDir, dbFile);



    this.db = new Database(full);



    this.pragma();



    this.initSchema();



    this.issuesManager = new ReviewIssuesManager(this.db);



  }







  pragma() {



    this.db.pragma('journal_mode = WAL');



    this.db.pragma('synchronous = NORMAL');



    this.db.pragma('foreign_keys = ON');



    this.db.pragma('temp_store = MEMORY');



    // cache_size: negative means KB



    this.db.pragma('cache_size = -20000'); // ~20MB



    this.db.pragma('mmap_size = 3000000000'); // ~3GB



  }







  initSchema() {



    const sql = `



    CREATE TABLE IF NOT EXISTS tasks (



      id TEXT PRIMARY KEY,



      title TEXT NOT NULL,



      text TEXT NOT NULL,



      done INTEGER NOT NULL DEFAULT 0,



      meta TEXT,



      vclock INTEGER NOT NULL DEFAULT 0,



      created_at INTEGER NOT NULL,



      updated_at INTEGER NOT NULL,



      parent_id TEXT,



      level INTEGER NOT NULL DEFAULT 2,



      state TEXT NOT NULL DEFAULT 'DRAFT',



      assignee TEXT,



      due_at INTEGER,



      archived INTEGER NOT NULL DEFAULT 0



    );



    -- External content FTS5 (no content duplication)



    CREATE VIRTUAL TABLE IF NOT EXISTS tasks_fts USING fts5(



      id UNINDEXED,



      title,



      text,



      meta,



      content='tasks',



      content_rowid='rowid',



      tokenize='unicode61 remove_diacritics 2'



    );



    CREATE TABLE IF NOT EXISTS blobs (



      sha256 TEXT PRIMARY KEY,



      bytes INTEGER NOT NULL,



      created_at INTEGER NOT NULL



    );



    CREATE TABLE IF NOT EXISTS task_blobs (



      task_id TEXT NOT NULL,



      sha256 TEXT NOT NULL,



      PRIMARY KEY(task_id, sha256)



    );



    -- Change feed



    CREATE TABLE IF NOT EXISTS changes (



      seq INTEGER PRIMARY KEY AUTOINCREMENT,



      ts INTEGER NOT NULL,



      entity TEXT NOT NULL,



      id TEXT NOT NULL,



      op TEXT NOT NULL,



      vclock INTEGER



    );



    `;



    this.db.exec(sql);







    // Backfill columns for pre-existing databases



try { this.db.exec(`ALTER TABLE tasks ADD COLUMN archived INTEGER NOT NULL DEFAULT 0;`); } catch (e) { /* ignore if exists */ }



    try { this.db.exec(`ALTER TABLE tasks ADD COLUMN due_at INTEGER;`); } catch (e) { /* ignore if exists */ }



    try { this.db.exec(`ALTER TABLE tasks ADD COLUMN created_at INTEGER;`); } catch (e) { /* ignore if exists */ }



    try { this.db.exec(`ALTER TABLE archived_tasks ADD COLUMN due_at INTEGER;`); } catch (e) { /* ignore if exists */ }



this.db.exec(`



  CREATE TABLE IF NOT EXISTS archived_tasks (



    id TEXT PRIMARY KEY,



    title TEXT NOT NULL,



    text TEXT NOT NULL,



    done INTEGER NOT NULL,



    meta TEXT,



    vclock INTEGER NOT NULL,



    due_at INTEGER,



    archived_at INTEGER NOT NULL,



    reason TEXT



  );



  CREATE TABLE IF NOT EXISTS reviews (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    at INTEGER NOT NULL,



    by TEXT NOT NULL,



    decision TEXT NOT NULL,



    note TEXT



  );



  CREATE TABLE IF NOT EXISTS review_comments (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    at INTEGER NOT NULL,



    by TEXT NOT NULL,



    text TEXT NOT NULL



  );



  CREATE TABLE IF NOT EXISTS task_state_history (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    from_state TEXT,



    to_state TEXT NOT NULL,



    at INTEGER NOT NULL,



    by TEXT,



    note TEXT



  );



  CREATE TABLE IF NOT EXISTS task_links (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    target_id TEXT NOT NULL,



    relation TEXT NOT NULL,



    created_at INTEGER NOT NULL,



    note TEXT,



    UNIQUE(task_id, target_id, relation)



  );



  CREATE TABLE IF NOT EXISTS task_notes (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    at INTEGER NOT NULL,



    author TEXT NOT NULL,



    body TEXT NOT NULL,



    is_internal BOOLEAN DEFAULT 0



  );



  CREATE TABLE IF NOT EXISTS review_issues (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    task_id TEXT NOT NULL,



    review_id INTEGER,



    title TEXT NOT NULL,



    description TEXT,



    status TEXT NOT NULL DEFAULT 'open',



    priority TEXT DEFAULT 'medium',



    category TEXT,



    severity TEXT DEFAULT 'medium',



    created_at INTEGER NOT NULL,



    created_by TEXT NOT NULL,



    resolved_at INTEGER,



    resolved_by TEXT,



    closed_at INTEGER,



    closed_by TEXT,



    due_date INTEGER,



    tags TEXT,



    FOREIGN KEY (task_id) REFERENCES tasks(id),



    FOREIGN KEY (review_id) REFERENCES reviews(id)



  );



  CREATE TABLE IF NOT EXISTS issue_responses (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    issue_id INTEGER NOT NULL,



    response_type TEXT NOT NULL,



    content TEXT NOT NULL,



    created_at INTEGER NOT NULL,



    created_by TEXT NOT NULL,



    is_internal BOOLEAN DEFAULT 0,



    attachment_sha256 TEXT,



    FOREIGN KEY (issue_id) REFERENCES review_issues(id)



  );



  CREATE TABLE IF NOT EXISTS issue_relations (



    id INTEGER PRIMARY KEY AUTOINCREMENT,



    source_issue_id INTEGER NOT NULL,



    target_issue_id INTEGER NOT NULL,



    relation_type TEXT NOT NULL,



    created_at INTEGER NOT NULL,



    created_by TEXT NOT NULL,



    FOREIGN KEY (source_issue_id) REFERENCES review_issues(id),



    FOREIGN KEY (target_issue_id) REFERENCES review_issues(id),



    UNIQUE(source_issue_id, target_issue_id, relation_type)



  );



  CREATE INDEX IF NOT EXISTS idx_review_issues_task_id ON review_issues(task_id);



  CREATE INDEX IF NOT EXISTS idx_review_issues_status ON review_issues(status);



  CREATE INDEX IF NOT EXISTS idx_review_issues_priority ON review_issues(priority);



  CREATE INDEX IF NOT EXISTS idx_review_issues_category ON review_issues(category);



  CREATE INDEX IF NOT EXISTS idx_review_issues_created_by ON review_issues(created_by);



  CREATE INDEX IF NOT EXISTS idx_review_issues_created_at ON review_issues(created_at);



  CREATE INDEX IF NOT EXISTS idx_issue_responses_issue_id ON issue_responses(issue_id);



  CREATE INDEX IF NOT EXISTS idx_issue_responses_created_at ON issue_responses(created_at);



  CREATE INDEX IF NOT EXISTS idx_issue_relations_source ON issue_relations(source_issue_id);



  CREATE INDEX IF NOT EXISTS idx_issue_relations_target ON issue_relations(target_issue_id);



`);



    // FTS sync triggers



    this.db.exec(`



      CREATE TRIGGER IF NOT EXISTS tasks_ai AFTER INSERT ON tasks BEGIN



        INSERT INTO tasks_fts(rowid, id, title, text, meta)



        VALUES (new.rowid, new.id, new.title, new.text, COALESCE(new.meta, ''));



      END;



      CREATE TRIGGER IF NOT EXISTS tasks_ad AFTER DELETE ON tasks BEGIN



        INSERT INTO tasks_fts(tasks_fts, rowid, id, title, text, meta)



        VALUES('delete', old.rowid, old.id, old.title, old.text, COALESCE(old.meta, ''));



      END;



      CREATE TRIGGER IF NOT EXISTS tasks_au AFTER UPDATE ON tasks BEGIN



        INSERT INTO tasks_fts(tasks_fts, rowid, id, title, text, meta)



        VALUES('delete', old.rowid, old.id, old.title, old.text, COALESCE(old.meta, ''));



        INSERT INTO tasks_fts(rowid, id, title, text, meta)



        VALUES (new.rowid, new.id, new.title, new.text, COALESCE(new.meta, ''));



      END;



    `);



  }







  upsertTask(



    id: string,



    title: string,



    text: string,



    meta?: any | null,



    if_vclock?: number,



    extra?: { parent_id?: string | null; level?: number; state?: string; assignee?: string | null; due_at?: number | null }



  ) {



    const now = Date.now();



    const row = this.getTask(id);



    const metaProvided = meta !== undefined;



    const parentProvided = extra ? Object.prototype.hasOwnProperty.call(extra, 'parent_id') : false;



    const dueProvided = extra ? Object.prototype.hasOwnProperty.call(extra, 'due_at') : false;







    if (row) {



      if (row.archived) {



        const err: any = new Error('archived');



        err.code = 409;



        throw err;



      }



    if (if_vclock != null && if_vclock !== row.vclock) {



        const err: any = new Error('vclock_conflict');



        err.code = 409;



        err.current = row.vclock;



        throw err;



      }



      const vclock = row.vclock + 1;



      const st = extra?.state ?? row.state;



      const asg = extra?.assignee ?? row.assignee ?? null;



      const pid = parentProvided ? extra!.parent_id ?? null : row.parent_id ?? null;



      const lvl = extra?.level != null ? extra.level : row.level;



      const due = dueProvided ? extra!.due_at ?? null : row.due_at ?? null;



      const metaJson = metaProvided ? (meta === null ? null : JSON.stringify(meta)) : row.meta;







      this.db



        .prepare(`UPDATE tasks SET title=?, text=?, meta=?, vclock=?, updated_at=?, parent_id=?, level=?, state=?, assignee=?, due_at=? WHERE id=?`)



        .run(title, text, metaJson, vclock, now, pid, lvl, st, asg, due, id);







      if (st !== row.state) {



        this.db.prepare(`INSERT INTO task_state_history(task_id, from_state, to_state, at) VALUES (?,?,?,?)`).run(id, row.state, st, now);



      }



      



      // 変更フィードに記録



      this.insertChange('task', id, 'update', vclock);



      



      return vclock;



    } else {



      const vclock = 1;



      const st = extra?.state ?? 'DRAFT';



      const asg = extra?.assignee ?? null;



      const pid = parentProvided ? extra!.parent_id ?? null : null;



      const lvl = extra?.level != null ? extra.level : 2;



      const due = dueProvided ? extra!.due_at ?? null : null;



      const metaJson = meta === undefined ? null : meta === null ? null : JSON.stringify(meta);







      this.db



        .prepare(`INSERT INTO tasks(id,title,text,done,meta,vclock,created_at,updated_at,parent_id,level,state,assignee,due_at) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)`)



        .run(id, title, text, 0, metaJson, vclock, now, now, pid, lvl, st, asg, due);



      this.db.prepare(`INSERT INTO task_state_history(task_id, from_state, to_state, at) VALUES (?,?,?,?)`).run(id, null, st, now);



      



      // 変更フィードに記録



      this.insertChange('task', id, 'insert', vclock);



      



      return vclock;



    }



  }











  markDone(id: string, done: boolean, if_vclock?: number) {



    const row = this.getTask(id);



    if (!row) {



      const err: any = new Error('not_found');



      err.code = 404;



      throw err;



    }



    if (row.archived) { const err: any = new Error('archived'); err.code = 409; throw err; }



    if (if_vclock != null && if_vclock !== row.vclock) {



      const err: any = new Error('vclock_conflict');



      err.code = 409;



      err.current = row.vclock;



      throw err;



    }



    const vclock = row.vclock + 1;



    const now = Date.now();



    this.db.prepare(`UPDATE tasks SET done=?, vclock=?, updated_at=? WHERE id=?`)



      .run(done ? 1 : 0, vclock, now, id);



    return vclock;



  }







  getTask(id: string): TaskRow | null {



    const row = this.db.prepare(`SELECT * FROM tasks WHERE id=? AND archived=0`).get(id) as any;



    return row || null;



  }







  listRecent(limit=20) {



    return this.db.prepare(`SELECT id,title,done,updated_at,vclock FROM tasks WHERE archived=0 ORDER BY updated_at DESC LIMIT ?`).all(limit);



  }







  search(q: string, limit=20, offset=0, highlight=false) {



    const rows = this.db.prepare(



      `SELECT t.id, t.title,



              bm25(tasks_fts) AS score,



              ${highlight ? "snippet(tasks_fts, 2, '<b>', '</b>', '…', 12)" : "NULL"} AS snippet



       FROM tasks_fts JOIN tasks t ON t.rowid = tasks_fts.rowid



       WHERE tasks_fts MATCH ? AND t.archived=0



       ORDER BY score LIMIT ? OFFSET ?`



    ).all(q, limit, offset);



    return rows;



  }







  // CAS operations



  hasBlob(sha256: string) {



    const row = this.db.prepare(`SELECT sha256 FROM blobs WHERE sha256=?`).get(sha256);



    return !!row;



  }







  putBlob(sha256: string, bytes: Buffer, size: number) {



    const p = this.getBlobPath(sha256);



if (!fs.existsSync(p)) {



  fs.writeFileSync(p, bytes);



}



const now = Date.now();



    this.db.prepare(`INSERT OR IGNORE INTO blobs(sha256,bytes,created_at) VALUES (?,?,?)`).run(sha256, size, now);



return p;



  }







  getBlobPath(sha256: string) {



    return path.join(this.casRoot, sha256);



}







archiveTask(id: string, reason?: string) {



  const row = this.getTask(id);



  if (!row) { const e: any = new Error('not_found'); e.code = 404; throw e; }



  if (row.archived) return { ok: true, archived_at: Date.now() };



  const now = Date.now();



  



  try {



  const tx = this.db.transaction(() => {



      this.db.prepare(`INSERT OR REPLACE INTO archived_tasks (id,title,text,done,meta,vclock,due_at,archived_at,reason) VALUES (?,?,?,?,?,?,?,?,?)`)



        .run(row.id, row.title, row.text, row.done, row.meta, row.vclock, row.due_at ?? null, now, reason ?? null);



    // rely on FTS triggers to keep the index in sync



    this.db.prepare(`UPDATE tasks SET archived=1, updated_at=? WHERE id=?`).run(now, id);



  });



  tx();



  return { ok: true, archived_at: now };



  } catch (error: any) {



    // データベース破損の場合は、シンプルなアーカイブ処理を行う



    console.warn('Archive task failed, using simple approach:', error.message);



    this.db.prepare(`UPDATE tasks SET archived=1, updated_at=? WHERE id=?`).run(now, id);



  return { ok: true, archived_at: now };



  }



}







restoreTask(id: string) {



  const snap = this.db.prepare(`SELECT * FROM archived_tasks WHERE id=?`).get(id) as any;



  if (!snap) { 



    // archived_tasksにデータがない場合は、単純にarchivedフラグを解除



    console.warn('Restore task: no archived data found, using simple approach');



  const now = Date.now();



    this.db.prepare(`UPDATE tasks SET archived=0, updated_at=? WHERE id=?`).run(now, id);



    return { ok: true };



  }



  



  const now = Date.now();



  try {



  const tx = this.db.transaction(() => {



      this.db.prepare(`UPDATE tasks SET archived=0, updated_at=?, title=?, text=?, done=?, meta=?, vclock=?, due_at=? WHERE id=?`)



        .run(now, snap.title, snap.text, snap.done, snap.meta, snap.vclock, snap.due_at ?? null, id);



    const rid = (this.db.prepare(`SELECT rowid FROM tasks WHERE id=?`).get(id) as any)?.rowid;



    if (rid != null) {



    // rely on FTS triggers to refresh the index entry



    this.db.prepare(`DELETE FROM archived_tasks WHERE id=?`).run(id);



  });



  tx();



  return { ok: true };



  } catch (error: any) {



    // データベース破損の場合は、シンプルな復元処理を行う



    console.warn('Restore task failed, using simple approach:', error.message);



    this.db.prepare(`UPDATE tasks SET archived=0, updated_at=? WHERE id=?`).run(now, id);



  return { ok: true };



  }



}







listArchived(limit=20, offset=0) {



  return this.db.prepare(`SELECT * FROM tasks WHERE archived=1 ORDER BY updated_at DESC, id DESC LIMIT ? OFFSET ?`).all(limit, offset);



}







  setState(id: string, to_state: string, by?: string | null, note?: string | null, at?: number) {



  const row = this.getTask(id);



    if (!row) { const e: any = new Error('not_found'); e.code = 404; throw e; }



    if (row.archived) { const e: any = new Error('archived'); e.code = 409; throw e; }



  if (row.state === to_state) return { vclock: row.vclock };



    const ts = at ?? Date.now();



  const vclock = row.vclock + 1;



    



    // Check for duplicate state change (same timestamp and same state change)



    const existing = this.db.prepare(`



      SELECT COUNT(*) as count FROM task_state_history 



      WHERE task_id = ? AND from_state = ? AND to_state = ? AND at = ? AND by = ?



    `).get(id, row.state, to_state, ts, by ?? null);



    



    if ((existing as any).count === 0) {



  this.db.prepare(`UPDATE tasks SET state=?, done=?, vclock=?, updated_at=? WHERE id=?`)



        .run(to_state, to_state === 'DONE' ? 1 : 0, vclock, ts, id);



  this.db.prepare(`INSERT INTO task_state_history(task_id, from_state, to_state, at, by, note) VALUES (?,?,?,?,?,?)`)



        .run(id, row.state, to_state, ts, by ?? null, note ?? null);



    } else {



      // Duplicate found, just update vclock without inserting history



      this.db.prepare(`UPDATE tasks SET vclock=? WHERE id=?`)



        .run(vclock, id);



    }



  return { vclock };



}







  addReview(task_id: string, decision: string, by: string, note?: string | null, at?: number | null) {



  const row = this.getTask(task_id);



    if (!row) { const e: any = new Error('not_found'); e.code = 404; throw e; }



    const ts = at ?? Date.now();



  this.db.prepare(`INSERT INTO reviews(task_id, at, by, decision, note) VALUES (?,?,?,?,?)`)



      .run(task_id, ts, by, decision, note ?? null);



  if (decision === 'REQUEST_CHANGES') {



      return this.setState(task_id, 'CHANGES_REQUESTED', by, note ?? undefined, ts);



  } else if (decision === 'APPROVE') {



      return this.setState(task_id, 'APPROVED', by, note ?? undefined, ts);



  }



  return { ok: true };



}







  addComment(task_id: string, by: string, text: string, at?: number | null) {



    const ts = at ?? Date.now();



  this.db.prepare(`INSERT INTO review_comments(task_id, at, by, text) VALUES (?,?,?,?)`)



      .run(task_id, ts, by, text);



  return { ok: true };



}







  // Helper functions for importTodoMd



  private parseAttrs(s: string) {



    const out: any = {};



    s.split(',').forEach(kv => {



      const m = kv.trim().match(/^([a-zA-Z_][a-zA-Z0-9_]*)\s*:\s*(.+)$/);



      if (m) out[m[1]] = m[2].replace(/^\{|\}$/g,'').trim();



    });



    return out;



  }







  private isoToEpoch(s: string) {



    const t = Date.parse(s);



    return isNaN(t) ? Date.now() : t;



  }







  // Regular expressions for importTodoMd



  private static readonly RE_L2 = /^## \[(.+?)\]\s+(.*?)(?:\s*\{([^}]*)\})?\s*$/;



  private static readonly RE_L3 = /^### \[(.+?)\]\s+(.*?)(?:\s*\{([^}]*)\})?\s*$/;



  private static readonly RE_META = /^Meta:\s*$/i;



  private static readonly RE_TIMELINE = /^Timeline:\s*$/i;



  private static readonly RE_RELATED = /^Related:\s*$/i;



  private static readonly RE_RELATED_WITH_CONTENT = /^Related:\s+.+$/i;



  private static readonly RE_NOTES = /^Notes:\s*$/i;



  private static readonly RE_REVIEW_HDR = /^####\s+Reviews\s*$/i;



  private static readonly RE_ISSUES = /^(?:###\s+)?Issues:?\s*$/i;



  private static readonly RE_ISSUE_HEADING = /^####\s+Issue\s+(\d+):\s*(.+)$/i;



  private static readonly RE_REVIEW = /^-\s+review@([^\s]+)\s+by\s+(\S+)\s*=>\s*(\S+)(?:\s+(.+))?$/i;



  private static readonly RE_COMMENT = /^-\s+comment@([^\s]+)\s+by\s+(\S+):\s*"(.+)"\s*$/i;



  private static readonly RE_TIMELINE_EVENT = /^- (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z) by (\S+): (.+)$/;







  // Parse task from line



  private parseTaskLine(line: string, lastTaskId: string | null) {



    const m2 = line.match(DB.RE_L2);



    if (m2) {



      const [_, id, title, attrsRaw] = m2;



      const attrs = attrsRaw ? this.parseAttrs(attrsRaw) : {};



      const state = (attrs.state || 'DRAFT').replace(/[{},]/g,'').trim();



      const assignee = attrs.assignee ? attrs.assignee.trim() : null;



      const due = attrs.due ? this.isoToEpoch(attrs.due) : null;



      this.upsertTask(id, title, '', null, undefined, { parent_id: null, level: 2, state, assignee, due_at: due });



      return { taskId: id, isTask: true };



    }







    const m3 = line.match(DB.RE_L3);



    if (m3) {



      const [_, id, title, attrsRaw] = m3;



      const attrs = attrsRaw ? this.parseAttrs(attrsRaw) : {};



      const state = (attrs.state || 'DRAFT').replace(/[{},]/g,'').trim();



      const assignee = attrs.assignee ? attrs.assignee.trim() : null;



      const due = attrs.due ? this.isoToEpoch(attrs.due) : null;



      this.upsertTask(id, title, '', lastTaskId, undefined, { parent_id: lastTaskId, level: 3, state, assignee, due_at: due });



      return { taskId: id, isTask: true };



    }







    return { taskId: lastTaskId, isTask: false };



  }







  // Handle state updates



  private handleStateUpdate(line: string, lastTaskId: string | null) {



    const stateMatch = line.match(/^- State:\s*(.+)$/);



    if (stateMatch && lastTaskId) {



      const newState = stateMatch[1].trim();



      try {



        const task = this.getTask(lastTaskId);



        if (task) {



          this.setState(lastTaskId, newState, 'system', 'State updated from TODO.md', Date.now());



        }



      } catch (e) {



        console.warn('Failed to update state:', e);



      }



      return true;



    }



    return false;



  }







  // Handle timeline parsing



  private handleTimelineParsing(line: string, lastTaskId: string | null, inTimeline: boolean, timelineEvents: any[]) {



    // Check for Timeline section header



    if (line.trim() === '### Timeline:') {



      return { inTimeline: true, timelineEvents };



    }







    if (inTimeline && lastTaskId) {



      // Parse timeline events in the format: "- 2025-01-16T09:00:00Z by system: Task created"



      const timelineMatch = line.match(DB.RE_TIMELINE_EVENT);



      if (timelineMatch) {



        const [, timestamp, actor, action] = timelineMatch;



        timelineEvents.push({



          timestamp,



          actor,



          action



        });



        return { inTimeline: true, timelineEvents };



      }



    }







    return { inTimeline, timelineEvents };



  }







  // Save timeline events to task meta



  private saveTimelineEvents(taskId: string, timelineEvents: any[]) {



    if (!taskId || timelineEvents.length === 0) return;







    const task = this.getTask(taskId);



    if (!task) return;







    // Get existing meta or create new one



    let meta = {};



    if (task.meta) {



      try {



        meta = JSON.parse(task.meta);



      } catch (e) {



        meta = {};



      }



    }







    // Add timeline to meta



    (meta as any).timeline = timelineEvents;







    // Update task with new meta



    const stmt = this.db.prepare(`



      UPDATE tasks SET meta = ? WHERE id = ?



    `);



    stmt.run(JSON.stringify(meta), taskId);



  }







  // Handle related parsing



  private handleRelatedParsing(line: string, lastTaskId: string | null, inRelated: boolean, relatedLinks: any[]) {



    // Check for Related section header



    if (line.trim() === '### Related:') {



      return { inRelated: true, relatedLinks };



    }







    if (inRelated && lastTaskId) {



      // Parse related links in various formats



      // Format 3: - [T-RELATED-3] External Link: https://example.com/issue/123 (check URL first)



      const urlMatch = line.match(/^- \[([^\]]+)\]\s+([^:]+):\s*(https?:\/\/[^\s]+)$/);



      if (urlMatch) {



        const [, taskId, title, url] = urlMatch;



        relatedLinks.push({



          taskId,



          title,



          url



        });



        return { inRelated: true, relatedLinks };



      }







      // Format 2: - [T-RELATED-2] Task with Description: This is a description



      const descMatch = line.match(/^- \[([^\]]+)\]\s+([^:]+):\s*(.+)$/);



      if (descMatch) {



        const [, taskId, title, description] = descMatch;



        relatedLinks.push({



          taskId,



          title,



          description



        });



        return { inRelated: true, relatedLinks };



      }







      // Format 1: - [T-RELATED-1] Simple Task (check simple format last)



      const simpleMatch = line.match(/^- \[([^\]]+)\]\s+(.+)$/);



      if (simpleMatch) {



        const [, taskId, title] = simpleMatch;



        relatedLinks.push({



          taskId,



          title



        });



        return { inRelated: true, relatedLinks };



      }



    }







    return { inRelated, relatedLinks };



  }







  // Save related links to task meta



  private saveRelatedLinks(taskId: string, relatedLinks: any[]) {



    if (!taskId || relatedLinks.length === 0) return;







    const task = this.getTask(taskId);



    if (!task) return;







    // Get existing meta or create new one



    let meta = {};



    if (task.meta) {



      try {



        meta = JSON.parse(task.meta);



      } catch (e) {



        meta = {};



      }



    }







    // Add related to meta



    (meta as any).related = relatedLinks;







    // Update task with new meta



    const stmt = this.db.prepare(`



      UPDATE tasks SET meta = ? WHERE id = ?



    `);



    stmt.run(JSON.stringify(meta), taskId);



  }







  // Handle notes parsing



  private handleNotesParsing(line: string, lastTaskId: string | null, inNotes: boolean, notesContent: string[]) {



    // Check for Notes section header



    if (line.trim() === '### Notes:') {



      return { inNotes: true, notesContent };



    }







    // Check if we're starting a new section (end of notes)



    if (inNotes && line.trim().startsWith('### ')) {



      return { inNotes: false, notesContent };



    }







    if (inNotes && lastTaskId) {



      // Add line to notes content (preserve original formatting)



      notesContent.push(line);



      return { inNotes: true, notesContent };



    }







    return { inNotes, notesContent };



  }







  // Save notes to task meta



  private saveNotes(taskId: string, notesContent: string[]) {



    if (!taskId) return;







    const task = this.getTask(taskId);



    if (!task) return;







    // Get existing meta or create new one



    let meta = {};



    if (task.meta) {



      try {



        meta = JSON.parse(task.meta);



      } catch (e) {



        meta = {};



      }



    }







    // Add notes to meta (join lines with newlines, trim trailing newlines)



    const notesText = notesContent.join('\n').replace(/\n+$/, '');



    (meta as any).notes = notesText;







    // Update task with new meta



    const stmt = this.db.prepare(`



      UPDATE tasks SET meta = ? WHERE id = ?



    `);



    stmt.run(JSON.stringify(meta), taskId);



  }







  // Handle meta parsing



  private handleMetaParsing(line: string, lastTaskId: string | null, inMeta: boolean, metaContent: string[]) {



    // Check for Meta section header



    if (line.trim() === 'Meta:') {



      return { inMeta: true, metaContent };



    }







    // Check if we're starting a new section (end of meta)



    if (inMeta && line.trim().startsWith('### ')) {



      return { inMeta: false, metaContent };



    }







    if (inMeta && lastTaskId) {



      // Add line to meta content (preserve original formatting)



      metaContent.push(line);



      return { inMeta: true, metaContent };



    }







    return { inMeta, metaContent };



  }







  // Save meta to task meta



  private saveMeta(taskId: string, metaContent: string[]) {



    if (!taskId || metaContent.length === 0) return;







    const task = this.getTask(taskId);



    if (!task) return;







    // Get existing meta or create new one



    let meta = {};



    if (task.meta) {



      try {



        meta = JSON.parse(task.meta);



      } catch (e) {



        meta = {};



      }



    }







    // Parse JSON from meta content



    const metaText = metaContent.join('\n');



    try {



      // Extract JSON from code blocks



      const jsonMatch = metaText.match(/```json\s*([\s\S]*?)\s*```/);



      if (jsonMatch) {



        const jsonText = jsonMatch[1];



        const parsedMeta = JSON.parse(jsonText);



        // Merge parsed meta with existing meta



        Object.assign(meta, parsedMeta);



      }



    } catch (e) {



      // If JSON parsing fails, ignore



    }







    // Update task with new meta



    const stmt = this.db.prepare(`



      UPDATE tasks SET meta = ? WHERE id = ?



    `);



    stmt.run(JSON.stringify(meta), taskId);



  }







  // Handle issues parsing



  private handleIssuesParsing(line: string, lastTaskId: string | null, inIssues: boolean, currentIssue: any, inResponses: boolean = false) {



    if (DB.RE_ISSUES.test(line.trim())) {



      return { inIssues: true, currentIssue: null, inResponses: false };



    }







      if (inIssues && lastTaskId) {



        const headingMatch = line.match(DB.RE_ISSUE_HEADING);



      if (headingMatch) {



        if (currentIssue) {



          this.saveIssue(currentIssue, lastTaskId);



        }



        const [, , issueTitle] = headingMatch;



        return { inIssues: true, currentIssue: this.createIssue(issueTitle), inResponses: false };



      }







      // Handle Responses section



      if (line.trim() === '- Responses:' || line.trim() === '**Responses:**') {



        return { inIssues: true, currentIssue, inResponses: true };



      }







        if (currentIssue) {



          // Handle responses in the format: "- 2025-01-16T10:00:00Z by developer1: I'll optimize the queries"



          // Check for internal flag at the end of the line



          const isInternal = line.trim().endsWith('(internal)');



          const cleanLine = isInternal ? line.replace(/\s*\(internal\)\s*$/, '') : line;



          const responseMatch = cleanLine.match(/^\s*-\s*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z) by (\S+) \(([^)]+)\): "(.+)"$/);



          if (responseMatch && inResponses) {



            const [, timestamp, author, responseType, response] = responseMatch;



            const createdAt = this.isoToEpoch(timestamp);



            



            // Add response to current issue



            if (!currentIssue.responses) {



              currentIssue.responses = [];



            }



            currentIssue.responses.push({



              response_type: responseType,



              content: response,



              created_at: createdAt,



              created_by: author,



              is_internal: isInternal ? 1 : 0



            });



            return { inIssues: true, currentIssue, inResponses: true };



          }







          // Handle both formats: "- Priority: High" and "- **Priority**: High"



          const fieldMatch = line.match(/^\s*-\s*\*\*([^*]+)\*\*:\s*(.+)$/) || line.match(/^\s*-\s*([^:]+):\s*(.+)$/);



          if (fieldMatch && !inResponses) {



            const [, fieldLabel, rawValue] = fieldMatch;



            this.applyIssueField(currentIssue, fieldLabel, rawValue);



            return { inIssues: true, currentIssue, inResponses: false };



          }



        



      }



    }







    return { inIssues, currentIssue, inResponses };



  }







  // Create issue helper



  private createIssue(title: string) {



    return {



      title: title.trim(),



      priority: 'medium',



      status: 'open',



      category: undefined,



      severity: 'medium',



      description: undefined,



      created_at: undefined,



      created_by: undefined,



      resolved_at: undefined,



      resolved_by: undefined,



      closed_at: undefined,



      closed_by: undefined,



      due_date: undefined,



      tags: undefined,



      responses: [] as any[]



    };



  }







  // Apply issue field helper



  private applyIssueField(issue: any, fieldLabel: string, rawValue: string) {



    const key = fieldLabel.trim().toLowerCase().replace(/\s+/g, '_');



    const value = rawValue.trim();



    if (!value) return;







    const parseTimeWithActor = (input: string) => {



      const match = input.match(/^(.+?)\s+by\s+(.+)$/i);



      if (match) {



        return { ts: this.isoToEpoch(match[1]), actor: match[2].trim() };



      }



      return { ts: this.isoToEpoch(input), actor: undefined };



    };







    switch (key) {



      case 'status':



        issue.status = value.toLowerCase();



        break;



      case 'priority':



        issue.priority = value.toLowerCase();



        break;



      case 'category':



        issue.category = value.toLowerCase();



        break;



      case 'severity':



        issue.severity = value.toLowerCase();



        break;



      case 'description':



        issue.description = value;



        break;



      case 'tags': {



        const bracketed = value.match(/\[([^\]]+)\]/g);



        const tags = bracketed



          ? bracketed.map(tag => tag.slice(1, -1).trim()).filter(Boolean)



          : value.split(',').map(t => t.trim()).filter(Boolean);



        issue.tags = tags;



        break;



      }



      case 'created': {



        const { ts, actor } = parseTimeWithActor(value);



        issue.created_at = ts;



        if (actor) issue.created_by = actor;



        break;



      }



      case 'created_by':



        issue.created_by = value;



        break;



      case 'resolved': {



        const { ts, actor } = parseTimeWithActor(value);



        issue.resolved_at = ts;



        if (actor) issue.resolved_by = actor;



        break;



      }



      case 'resolved_by':



        issue.resolved_by = value;



        break;



      case 'closed': {



        const { ts, actor } = parseTimeWithActor(value);



        issue.closed_at = ts;



        if (actor) issue.closed_by = actor;



        break;



      }



      case 'closed_by':



        issue.closed_by = value;



        break;



      case 'due':



        issue.due_date = this.isoToEpoch(value);



        break;



      default:



        if (key.endsWith('_by')) {



          issue[key] = value;



        } else if (key.endsWith('_at')) {



          issue[key] = this.isoToEpoch(value);



        }



        break;



    }



  }







  // Save issue helper



  private saveIssue(issue: any, taskId: string) {



    const stmt = this.db.prepare(`



      INSERT INTO review_issues (



        task_id, title, description, status, priority, category, severity,



        created_at, created_by, resolved_at, resolved_by, closed_at, closed_by,



        due_date, tags



      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)



    `);



    



    const result = stmt.run(



      taskId,



      issue.title,



      issue.description || null,



      issue.status || 'open',



      issue.priority || 'medium',



      issue.category || null,



      issue.severity || 'medium',



      issue.created_at || Date.now(),



      issue.created_by || 'system',



      issue.resolved_at || null,



      issue.resolved_by || null,



      issue.closed_at || null,



      issue.closed_by || null,



      issue.due_date || null,



      issue.tags ? JSON.stringify(issue.tags) : null



    );



    



    const issueId = result.lastInsertRowid as number;



    



    // Save responses



    if (issue.responses && issue.responses.length > 0) {



      const responseStmt = this.db.prepare(`



        INSERT INTO issue_responses (



          issue_id, response_type, content, created_at, created_by, is_internal



        ) VALUES (?, ?, ?, ?, ?, ?)



      `);



      



      for (const response of issue.responses) {



        responseStmt.run(



          issueId,



          response.response_type || 'comment',



          response.content,



          response.created_at,



          response.created_by,



          response.is_internal ? 1 : 0



        );



      }



    }



  }







  // --- TODO.md import/export (minimal) ---



  importTodoMd(md: string) {



    const lines = md.split(/\r?\n/);



    let currentSection: string|null = null;



    const sectionStack: string[] = [];



    let lastTaskId: string|null = null;



    let inIssues = false;



    let currentIssue: any = null;



    let inResponses = false;



    let inTimeline = false;



    let timelineEvents: any[] = [];



    let inRelated = false;



    let relatedLinks: any[] = [];



    let inNotes = false;



    let notesContent: string[] = [];



    let inMeta = false;



    let metaContent: string[] = [];







    // Parse each line



    for (const line of lines) {



      const trimmed = line.trim();



      



      // Don't skip empty lines if we're in notes section (to preserve formatting)



      if (!trimmed && !inNotes) continue;







      // Handle section headers



      if (line.startsWith('# ') && !line.startsWith('##')) {



        currentSection = line.replace(/^#\s+/, '').trim();



      continue;



    }







      // Parse tasks



      const taskResult = this.parseTaskLine(line, lastTaskId);



      if (taskResult.isTask) {



        // Save the current issue before moving to the next task



        if (currentIssue && lastTaskId) {



          this.saveIssue(currentIssue, lastTaskId);



          currentIssue = null;



          inIssues = false;



          inResponses = false;



        }



        



        lastTaskId = taskResult.taskId;



        // Reset timeline, related, notes, and meta state when starting a new task



        inTimeline = false;



        timelineEvents = [];



        inRelated = false;



        relatedLinks = [];



        inNotes = false;



        notesContent = [];



        inMeta = false;



        metaContent = [];



        continue;



      }







      // Handle state updates



      if (this.handleStateUpdate(line, lastTaskId)) {



        continue;



      }







      // Handle timeline parsing



      const timelineResult = this.handleTimelineParsing(line, lastTaskId, inTimeline, timelineEvents);



      inTimeline = timelineResult.inTimeline;



      timelineEvents = timelineResult.timelineEvents;







      // Handle related parsing



      const relatedResult = this.handleRelatedParsing(line, lastTaskId, inRelated, relatedLinks);



      inRelated = relatedResult.inRelated;



      relatedLinks = relatedResult.relatedLinks;







      // Handle notes parsing



      const notesResult = this.handleNotesParsing(line, lastTaskId, inNotes, notesContent);



      inNotes = notesResult.inNotes;



      notesContent = notesResult.notesContent;







      // Handle meta parsing



      const metaResult = this.handleMetaParsing(line, lastTaskId, inMeta, metaContent);



      inMeta = metaResult.inMeta;



      metaContent = metaResult.metaContent;







      // Handle issues parsing



      const issuesResult = this.handleIssuesParsing(line, lastTaskId, inIssues, currentIssue, inResponses);



      inIssues = issuesResult.inIssues;



      currentIssue = issuesResult.currentIssue;



      inResponses = issuesResult.inResponses;



    }







    // Save the last issue if exists



    if (currentIssue && lastTaskId) {



      this.saveIssue(currentIssue, lastTaskId);



    }







    // Save timeline events if exists (even if empty)



    if (lastTaskId) {



      this.saveTimelineEvents(lastTaskId, timelineEvents);



    }







    // Save related links if exists (even if empty)



    if (lastTaskId) {



      this.saveRelatedLinks(lastTaskId, relatedLinks);



    }







    // Save notes if exists (even if empty)



    if (lastTaskId) {



      this.saveNotes(lastTaskId, notesContent);



    }







    // Save meta if exists



    if (metaContent.length > 0 && lastTaskId) {



      this.saveMeta(lastTaskId, metaContent);



    }







  return { ok: true };



}







exportTodoMd(): string {



  // naive export: list L2 (parent null) and their L3



  const rows2 = this.db.prepare(`SELECT * FROM tasks WHERE level=2 AND archived=0 ORDER BY updated_at DESC`).all() as any[];



  const childStmt = this.db.prepare(`SELECT * FROM tasks WHERE parent_id=? AND archived=0 ORDER BY updated_at ASC`);



  let out = '# Tasks\n\n';



  for (const r of rows2) {



    const attrs = [`state: ${r.state}`];



    if (r.assignee) attrs.push(`assignee: ${r.assignee}`);



    if (r.due_at) attrs.push(`due: ${new Date(r.due_at).toISOString().slice(0,10)}`);



    out += `## [${r.id}] ${r.title} {${attrs.join(', ')}}\n`;



    



    // Meta block



    if (r.meta) {



      try {



        const meta = JSON.parse(r.meta);



        if (Object.keys(meta).length > 0) {



          out += `\nMeta:\n\`\`\`json\n${JSON.stringify(meta, null, 2)}\n\`\`\`\n`;



        }



      } catch (e) {



        // Skip invalid meta



      }



    }



    



    // Timeline block



    const timelineEvents: string[] = [];



    



    // State history



    const stateHistory = this.db.prepare(`SELECT * FROM task_state_history WHERE task_id=? ORDER BY at ASC`).all(r.id) as any[];



    for (const h of stateHistory) {



      const timestamp = new Date(h.at).toISOString();



      const note = h.note ? ` note "${h.note}"` : '';



      timelineEvents.push(`- ${timestamp} | STATE ${h.to_state} by ${h.by}${note}`);



    }



    



    // Reviews



    const revs = this.db.prepare(`SELECT * FROM reviews WHERE task_id=? ORDER BY at ASC`).all(r.id) as any[];



      for (const v of revs) {



      const timestamp = new Date(v.at).toISOString();



      const note = v.note ? ` note "${v.note}"` : '';



      timelineEvents.push(`- ${timestamp} | REVIEW ${v.decision} by ${v.by}${note}`);



      }



    



    // Comments



    const coms = this.db.prepare(`SELECT * FROM review_comments WHERE task_id=? ORDER BY at ASC`).all(r.id) as any[];



      for (const c of coms) {



      const timestamp = new Date(c.at).toISOString();



      timelineEvents.push(`- ${timestamp} | COMMENT by ${c.by} note "${c.text}"`);



    }



    



    if (timelineEvents.length > 0) {



      out += `\nTimeline:\n`;



      for (const event of timelineEvents) {



        out += `${event}\n`;



      }



    }



    



    // Related block



    const links = this.db.prepare(`SELECT * FROM task_links WHERE task_id=? ORDER BY relation, target_id`).all(r.id) as any[];



    if (links.length > 0) {



      out += `\nRelated:\n`;



      for (const link of links) {



        out += `- [${link.target_id}] (${link.relation})\n`;



      }



    }



    



    // Notes block



    const notes = this.db.prepare(`SELECT * FROM task_notes WHERE task_id=? ORDER BY at ASC`).all(r.id) as any[];



    if (notes.length > 0) {



      out += `\nNotes:\n`;



      for (const note of notes) {



        const timestamp = new Date(note.at).toISOString();



        const internal = note.is_internal ? ' (internal)' : '';



        out += `- ${timestamp} | ${note.author}:${internal} ${note.body}\n`;



      }



    }



    



    // Issues block



    const issues = this.db.prepare(`SELECT * FROM review_issues WHERE task_id=? ORDER BY created_at ASC`).all(r.id) as any[];



    const formatCapitalized = (value: string | null | undefined) => {



      if (!value) return '';



      return value.charAt(0).toUpperCase() + value.slice(1);



    };



    const formatTags = (raw: any): string | null => {



      if (!raw) return null;



      let tagsSource: any = raw;



      if (typeof tagsSource === 'string') {



        try {



          const parsed = JSON.parse(tagsSource);



          if (Array.isArray(parsed)) {



            tagsSource = parsed;



          } else {



            tagsSource = tagsSource.split(',');



          }



        } catch {



          tagsSource = tagsSource.split(',');



        }



      }



      if (Array.isArray(tagsSource)) {



        const cleaned = tagsSource.map((tag: any) => String(tag).trim()).filter(Boolean);



        return cleaned.length ? `[${cleaned.join(', ')}]` : null;



      }



      return null;



    };



    if (issues.length > 0) {



      out += `\n### Issues:\n\n`;



      out += `Issues:\n`;



      for (const issue of issues) {



        const title = issue.title || 'Untitled Issue';



        const priorityLabel = formatCapitalized(issue.priority) || 'Medium';



        const statusLabel = formatCapitalized(issue.status) || 'Open';



        const categoryLabel = formatCapitalized(issue.category);



        const severityLabel = formatCapitalized(issue.severity);



        out += `- **${priorityLabel}**: ${title}\n`;



        out += `  - Status: ${statusLabel}\n`;



        out += `  - Priority: ${priorityLabel}\n`;



        if (categoryLabel) {



          out += `  - Category: ${categoryLabel}\n`;



        }



        if (severityLabel) {



          out += `  - Severity: ${severityLabel}\n`;



        }



        if (issue.created_at) {



          const createdAt = new Date(issue.created_at).toISOString();



          const createdBy = issue.created_by || 'system';



          out += `  - Created: ${createdAt} by ${createdBy}\n`;



        }



        if (issue.resolved_at) {



          const resolvedAt = new Date(issue.resolved_at).toISOString();



          const resolvedBy = issue.resolved_by ? ` by ${issue.resolved_by}` : '';



          out += `  - Resolved: ${resolvedAt}${resolvedBy}\n`;



        }



        if (issue.closed_at) {



          const closedAt = new Date(issue.closed_at).toISOString();



          const closedBy = issue.closed_by ? ` by ${issue.closed_by}` : '';



          out += `  - Closed: ${closedAt}${closedBy}\n`;



        }



        if (issue.due_date) {



          const dueDate = new Date(issue.due_date).toISOString();



          out += `  - Due: ${dueDate}\n`;



        }



        if (issue.description) {



          out += `  - Description: ${issue.description}\n`;



        }



        const tagsText = formatTags(issue.tags);



        if (tagsText) {



          out += `  - Tags: ${tagsText}\n`;



        }



        const responses = this.db.prepare(`SELECT * FROM issue_responses WHERE issue_id=? ORDER BY created_at ASC`).all(issue.id) as any[];



        if (responses.length > 0) {



          out += `  - Responses:\n`;



          for (const response of responses) {



            const timestamp = new Date(response.created_at).toISOString();



            const responseType = (response.response_type || 'comment').toLowerCase();



            const content = String(response.content ?? '').replace(/"/g, '\"');



            const internalSuffix = response.is_internal ? ' (internal)' : '';



            out += `    - ${timestamp} by ${response.created_by || 'system'} (${responseType}): \"${content}\"${internalSuffix}\n`;



          }



        }



        out += `\n`;



      }



    }



    const kids = childStmt.all(r.id) as any[];



    for (const k of kids) {



      const attrs3 = [`state: ${k.state}`];



      out += `### [${k.id}] ${k.title} {${attrs3.join(', ')}}\n`;



    }



    out += `\n`;



  }



  return out;



}







  patchTask(id: string, operations: any, ifVclock: number): { ok: boolean; vclock?: number; error?: string; details?: any } {



    const task = this.getTask(id);



    if (!task) {



      return { ok: false, error: 'task_not_found' };



    }







    if (task.vclock !== ifVclock) {



      return { 



        ok: false, 



        error: 'vclock_conflict',



        details: { current_vclock: task.vclock }



      };



    }







    let newVclock = task.vclock + 1;



    let updates: any = {};



    let newMeta = task.meta ? JSON.parse(task.meta) : {};







    // set操作



    if (operations.set) {



      Object.assign(updates, operations.set);



    }







    // append操作



    if (operations.append) {



      for (const [key, value] of Object.entries(operations.append)) {



        if (key === 'text' && updates.text) {



          updates.text += value;



        } else if (key === 'text') {



          updates.text = (task.text || '') + value;



        }



      }



    }







    // merge操作



    if (operations.merge) {



      if (operations.merge.meta) {



        newMeta = { ...newMeta, ...operations.merge.meta };



        updates.meta = JSON.stringify(newMeta);



      }



      // meta以外のフィールドをマージ



      const { meta, ...otherFields } = operations.merge;



      Object.assign(updates, otherFields);



    }







    // delete操作



    if (operations.delete) {



      if (operations.delete.meta) {



        for (const key of operations.delete.meta) {



          delete newMeta[key];



        }



        updates.meta = JSON.stringify(newMeta);



      }



    }







    // replace操作



    if (operations.replace) {



      if (operations.replace.meta) {



        updates.meta = JSON.stringify(operations.replace.meta);



      }



      // meta以外のフィールドを置換



      const { meta, ...otherFields } = operations.replace;



      Object.assign(updates, otherFields);



    }







    // 無効な操作をチェック



    const validOperations = ['set', 'append', 'merge', 'delete', 'replace'];



    const invalidOps = Object.keys(operations).filter(op => !validOperations.includes(op));



    if (invalidOps.length > 0) {



      return { ok: false, error: 'invalid_operation' };



    }







    // データベースを更新



    if (Object.keys(updates).length > 0) {



      updates.vclock = newVclock;



      updates.updated_at = Date.now();



      



      const setClause = Object.keys(updates).map(key => `${key} = ?`).join(', ');



      const values = Object.values(updates);



      values.push(id);



      



      this.db.prepare(`UPDATE tasks SET ${setClause} WHERE id = ?`).run(...values);



    }







    return { ok: true, vclock: newVclock };



  }







  // Change feed methods



  insertChange(entity: string, id: string, op: string, vclock?: number) {



    const now = Date.now();



    this.db.prepare(`



      INSERT INTO changes (ts, entity, id, op, vclock) 



      VALUES (?, ?, ?, ?, ?)



    `).run(now, entity, id, op, vclock || null);



    return now;



  }







  pollChanges(since: number = 0, limit: number = 200) {



    return this.db.prepare(`



      SELECT * FROM changes 



      WHERE seq > ? 



      ORDER BY seq ASC 



      LIMIT ?



    `).all(since, limit);



  }







  close() {
    try {
      this.db.pragma('wal_checkpoint(TRUNCATE)');
    } catch (err) {
      // ignore checkpoint errors on close
    }
    this.db.close();
  }

    this.db.close();



  }



}















































